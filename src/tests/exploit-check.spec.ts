import { ethers, network } from "hardhat";
import { expect } from "chai";
import * as dotenv from "dotenv";
import { provider } from "../helpers/constants";

dotenv.config();

const ERC20_ABI = [
    "function balanceOf(address) view returns (uint256)",
    "function transfer(address to, uint256 amount) returns (bool)",
    "function approve(address spender, uint256 amount) returns (bool)",
    "function decimals() view returns (uint8)",
];

describe("Exploit Simulation for Decimal Issues", function () {
    const TARGET_TOKEN = "0xAa46C18A0C1a00546A06ab07e7cC7C3996645436"; // Replace with any audited token
    const HOLDER = "0xf857d3dcA20e57d3900E2723734B5D627d4bED44";     // Replace with any real holder
    const RECIPIENT = "0x0000000000000000000000000000000000000001";  // Dummy recipient
    beforeEach(async function () {
        await network.provider.request({
            method: "hardhat_reset",
            params: [
                {
                    forking: {
                        jsonRpcUrl: "https://mainnet.infura.io/v3/5aba9a86b6994516850405fd8f18c075",
                        blockNumber: 22494600,
                    },
                },
            ],
        });

        // âœ… This line is required to impersonate the HOLDER
        await network.provider.request({
            method: "hardhat_impersonateAccount",
            params: [HOLDER],
        });
    });


    it("should transfer tokens without decimal miscalculation", async () => {
        const [funder] = await ethers.getSigners();

        // Fund the impersonated account
        await funder.sendTransaction({
            to: HOLDER,
            value: ethers.parseEther("1.0"),
        });

        // const signer = await ethers.getSigner(HOLDER);
        const signer = await ethers.getSigner(HOLDER);
        const token = new ethers.Contract(TARGET_TOKEN, ERC20_ABI, signer);

        const decimals = await token.decimals();
        console.log("Decimals:", decimals);

        const balBefore = await token.balanceOf(HOLDER);
        const amount = ethers.parseUnits("1.0", decimals);

        console.log("Balance before:", balBefore.toString());
        console.log("Attempting to transfer:", amount.toString());

        const tx = await token.transfer(RECIPIENT, amount);
        await tx.wait();

        const balAfter = await token.balanceOf(HOLDER);
        expect(balAfter).to.be.lt(balBefore);
    });
});
